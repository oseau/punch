{"version":3,"file":"static/webpack/static/development/pages/camera.js.e9779c31ad3f908f4ad7.hot-update.js","sources":["webpack:///./components/monitor.js"],"sourcesContent":["export default class extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  isVisible = () => this.props.isVisible;\n  initCameraStream = (topUp, isVisible) => {\n    const DetectRTC = require(\"detectrtc\");\n    require(\"tracking\");\n    require(\"tracking/build/data/face\");\n\n    DetectRTC.load(() => {\n      if (DetectRTC.isWebRTCSupported == false) {\n        alert(\n          \"Please use Chrome, Firefox, iOS 11, Android 5 or higher, Safari 11 or higher\"\n        );\n      } else {\n        if (DetectRTC.hasWebcam == false) {\n          alert(\"Please install an external webcam device.\");\n        } else {\n          const tracker = new window.tracking.ObjectTracker(\"face\");\n          tracker.setInitialScale(4);\n          tracker.setStepSize(2);\n          tracker.setEdgesDensity(0.1);\n\n          window.tracking.track(\"#video\", tracker, { camera: true });\n\n          tracker.on(\"track\", function(event) {\n            if (event.data.length > 0 && isVisible()) {\n              topUp();\n            }\n          });\n        }\n      }\n    });\n  };\n  takeSnapshot = () => {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = this.video.videoWidth;\n    canvas.height = this.video.videoHeight;\n\n    const context = canvas.getContext(\"2d\");\n    context.drawImage(this.video, 0, 0, canvas.width, canvas.height);\n    function getCanvasBlob(canvas) {\n      return new Promise(function(resolve, reject) {\n        canvas.toBlob(function(blob) {\n          resolve(blob);\n        }, \"image/jpeg\");\n      });\n    }\n    return getCanvasBlob(canvas).then(function(blob) {\n      const urlCreator = window.URL || window.webkitURL;\n      return urlCreator.createObjectURL(blob);\n    });\n  };\n  componentDidMount() {\n    this.video = document.getElementById(\"video\");\n    this.initCameraStream(this.props.topUp, this.isVisible);\n  }\n  componentWillUnmount() {\n    // window.stream.getTracks().forEach(track => track.stop());\n  }\n\n  render() {\n    return (\n      <div className=\"demo-container\">\n        <video id=\"video\" autoPlay loop muted />\n        <style jsx>{`\n          .demo-container {\n            margin: 0 auto;\n            text-align: center;\n          }\n          #video {\n            max-width: 100%;\n            margin: 0 auto;\n          }\n        `}</style>\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AAAA;AACA;AAJA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AAmCA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AArDA;AAEA;AACA;;;AAkDA;AACA;AACA;AACA;;;AACA;AAEA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAcA;;;;AA9EA;AACA;;;;;A","sourceRoot":""}